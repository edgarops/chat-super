{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","auth","firestore","SignIn","onClick","provider","GoogleAuthProvider","signInWithPopup","SignOut","currentUser","signOut","ChatRoom","messagesRef","collection","query","orderBy","limitToLast","useCollectionData","idField","messages","useState","formValue","setFormValue","sendMessage","e","a","preventDefault","uid","photoURL","displayName","add","text","createdAt","FieldValue","serverTimestamp","map","msg","ChatMessage","message","id","onSubmit","value","onChange","target","placeholder","type","disabled","props","messageClass","className","src","App","useAuthState","user","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2RAUAA,IAASC,cAAc,CACrBC,OAAQ,0CACRC,WAAY,mCACZC,UAAW,mBACXC,cAAe,+BACfC,kBAAmB,gBACnBC,MAAO,+CAGT,IAAMC,EAAOR,IAASQ,OAChBC,EAAYT,IAASS,YAqB3B,SAASC,IAOP,OACI,wBAAQC,QANa,WACvB,IAAMC,EAAW,IAAIZ,IAASQ,KAAKK,mBACnCL,EAAKM,gBAAgBF,IAInB,iCAIN,SAASG,IACP,OAAOP,EAAKQ,aACV,wBAAQL,QAAS,kBAAMH,EAAKS,WAA5B,sBAGJ,SAASC,IAEP,IAAMC,EAAcV,EAAUW,WAAW,YACnCC,EAAQF,EAAYG,QAAQ,aAAaC,YAAY,MAE3D,EAAmBC,YAAkBH,EAAO,CAAEI,QAAS,OAAhDC,EAAP,oBAEA,EAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KAGMC,EAAW,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,6DAClBD,EAAEE,iBADgB,EAGqBzB,EAAKQ,YAApCkB,EAHU,EAGVA,IAAKC,EAHK,EAGLA,SAAUC,EAHL,EAGKA,YAHL,SAKZjB,EAAYkB,IAAI,CACpBC,KAAMF,EAAc,MAAQR,EAC5BW,UAAWvC,IAASS,UAAU+B,WAAWC,kBACzCP,MACAC,WACAC,gBAVgB,OAalBP,EAAa,IAbK,2CAAH,sDAkBjB,OAAQ,qCACN,+BACGH,GAAYA,EAASgB,KAAI,SAAAC,GAAG,OAAI,cAACC,EAAD,CAA0BC,QAASF,GAAjBA,EAAIG,SAEzD,uBAAMC,SAAUjB,EAAhB,UAEE,uBAAOkB,MAAOpB,EAAWqB,SAAU,SAAClB,GAAD,OAAOF,EAAaE,EAAEmB,OAAOF,QAAQG,YAAY,uBAEpF,wBAAQC,KAAK,SAASC,UAAWzB,EAAjC,sCAKN,SAASgB,EAAYU,GACnB,MAAgCA,EAAMT,QAA9BP,EAAR,EAAQA,KAAMJ,EAAd,EAAcA,IAAKC,EAAnB,EAAmBA,SAEboB,EAAerB,IAAQ1B,EAAKQ,YAAYkB,IAAM,OAAS,WAE7D,OAAQ,mCACN,sBAAKsB,UAAS,kBAAaD,GAA3B,UACE,qBAAKE,IAAKtB,IACV,4BAAIG,SAKKoB,MA1Ff,WAEE,MAAeC,YAAanD,GAArBoD,EAAP,oBAEA,OACE,sBAAKJ,UAAU,MAAf,UACE,mCACE,sEACA,cAACzC,EAAD,OAGF,kCACG6C,EAAO,cAAC1C,EAAD,IAAe,cAACR,EAAD,UCtBhBmD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7f913756.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport './App.css';\n\nimport firebase from 'firebase/compat/app';\nimport 'firebase/compat/firestore';\nimport 'firebase/compat/auth';\n\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyCelcu76wPtd7HEGs4RFxldEWZcBLdpzCU\",\n  authDomain: \"chat-super-9094f.firebaseapp.com\",\n  projectId: \"chat-super-9094f\",\n  storageBucket: \"chat-super-9094f.appspot.com\",\n  messagingSenderId: \"1012913840836\",\n  appId: \"1:1012913840836:web:431f0c74b523c7343c5f91\"\n});\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n\nfunction App() {\n\n  const [user] = useAuthState(auth);\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>‚öõÔ∏èüî•üí¨</h1>\n        <SignOut />\n      </header>\n\n      <section>\n        {user ? <ChatRoom /> : <SignIn />}\n      </section>\n\n    </div>\n  );\n}\n\nfunction SignIn() {\n\n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider);\n  }\n\n  return (\n      <button onClick={signInWithGoogle}>Sign in with Google</button>\n  )\n\n}\nfunction SignOut() {\n  return auth.currentUser && (\n    <button onClick={() => auth.signOut()}>Sign Out</button>\n  )\n}\nfunction ChatRoom() {\n\n  const messagesRef = firestore.collection('messages');\n  const query = messagesRef.orderBy('createdAt').limitToLast(1024);\n\n  const [messages] = useCollectionData(query, { idField: 'id' });\n\n  const [formValue, setFormValue] = useState('');\n\n\n  const sendMessage = async (e) => {\n    e.preventDefault();\n\n    const { uid, photoURL, displayName } = auth.currentUser;\n    \n    await messagesRef.add({\n      text: displayName + \" : \" + formValue,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      uid,\n      photoURL,\n      displayName\n    })\n\n    setFormValue('');\n    \n  }\n\n\n  return (<>\n    <main>\n      {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg} />)}\n    </main>\n    <form onSubmit={sendMessage}>\n\n      <input value={formValue} onChange={(e) => setFormValue(e.target.value)} placeholder=\"say something nice\" />\n\n      <button type=\"submit\" disabled={!formValue}>üïäÔ∏è</button>\n\n    </form>\n  </>)\n}\nfunction ChatMessage(props) {\n  const { text, uid, photoURL } = props.message;\n\n  const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\n\n  return (<>\n    <div className={`message ${messageClass}`}>\n      <img src={photoURL} />\n      <p>{text}</p>\n    </div>\n  </>)\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}